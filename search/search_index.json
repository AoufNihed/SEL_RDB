{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SEL_RDB Documentation","text":"<p>Welcome to the technical documentation for SEL_RDB, a Python package for analyzing and creating SEL (Schweitzer Engineering Laboratories) <code>.rdb</code> relay database files.</p>"},{"location":"#table-of-contents","title":"Table of Contents","text":"<ul> <li>Introduction</li> <li>Installation</li> <li>Quickstart</li> <li> <p>Usage Examples</p> </li> <li> <p>Case Studies</p> </li> <li>API Reference</li> <li>Contributing</li> <li>License</li> </ul>"},{"location":"#introduction","title":"Introduction","text":"<p>SEL_RDB is a specialized Python toolkit designed to work with SEL (Schweitzer Engineering Laboratories) .rdb relay database files. These files contain configuration data for SEL protective relays, which are widely used in power system protection applications.</p> <p>This toolkit provides utilities to: - Analyze SEL .rdb files and extract their internal structure - Extract logic sections containing protection and control logic - Convert text-based relay settings to valid .rdb format - Work with SEL relay configuration data programmatically</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>RDB Analysis: Analyze SEL .rdb files and extract their contents including streams and internal structure</li> <li>Logic Extraction: Extract logic sections from RDB files containing protection and control equations</li> <li>Format Conversion: Convert text-based relay settings to valid .rdb format using template-based approach</li> <li>Stream Listing: List all streams within an RDB file to understand its internal structure</li> <li>Programmatic Access: Use as a Python library for integration with other applications</li> <li>Command-line Tools: Standalone CLI tools for common operations</li> </ul>"},{"location":"#technical-approach","title":"Technical Approach","text":"<p>The toolkit uses the <code>olefile</code> library to read and manipulate the OLE2 structured storage format used by SEL .rdb files. For creating new RDB files, it employs a template-based approach:</p> <ol> <li>Template Copying: Copy a valid RDB template file</li> <li>Stream Modification: Modify specific streams with new configuration data</li> <li>Validation: Ensure the resulting file maintains proper structure</li> </ol> <p>This approach is more reliable than creating OLE2 files from scratch, which is complex and error-prone.</p>"},{"location":"DOCUMENTATION_DEVELOPMENT_SUMMARY/","title":"Documentation Development Summary","text":""},{"location":"DOCUMENTATION_DEVELOPMENT_SUMMARY/#overview","title":"Overview","text":"<p>I've created comprehensive documentation for the SEL_RDB project with the following components:</p> <ol> <li>Structured Documentation Files - Created in the <code>docs/</code> directory</li> <li>Updated README.md - Enhanced with better quickstart examples and links</li> <li>MkDocs Configuration - For generating static documentation site</li> </ol>"},{"location":"DOCUMENTATION_DEVELOPMENT_SUMMARY/#documentation-structure","title":"Documentation Structure","text":"<pre><code>docs/\n\u251c\u2500\u2500 index.md              # Main documentation index\n\u251c\u2500\u2500 installation.md       # Installation guide\n\u251c\u2500\u2500 quickstart.md         # Quickstart guide\n\u251c\u2500\u2500 usage.md              # Detailed usage examples\n\u251c\u2500\u2500 api.md                # API reference\n\u251c\u2500\u2500 contributing.md       # Contribution guidelines\n\u251c\u2500\u2500 license.md            # License information\n\u2514\u2500\u2500 mkdocs.yml            # MkDocs configuration\n</code></pre>"},{"location":"DOCUMENTATION_DEVELOPMENT_SUMMARY/#building-the-documentation","title":"Building the Documentation","text":"<p>To build and serve the documentation locally:</p> <ol> <li> <p>Install MkDocs and the Material theme:    <pre><code>pip install mkdocs mkdocs-material\n</code></pre></p> </li> <li> <p>Serve the documentation locally:    <pre><code>mkdocs serve\n</code></pre></p> </li> <li> <p>Build the static site:    <pre><code>mkdocs build\n</code></pre></p> </li> <li> <p>Deploy to GitHub Pages:    <pre><code>mkdocs gh-deploy\n</code></pre></p> </li> </ol>"},{"location":"DOCUMENTATION_DEVELOPMENT_SUMMARY/#documentation-content","title":"Documentation Content","text":""},{"location":"DOCUMENTATION_DEVELOPMENT_SUMMARY/#indexmd","title":"index.md","text":"<ul> <li>Project overview and introduction</li> <li>Key features list</li> <li>Technical approach explanation</li> </ul>"},{"location":"DOCUMENTATION_DEVELOPMENT_SUMMARY/#installationmd","title":"installation.md","text":"<ul> <li>Prerequisites</li> <li>Installation methods (PyPI, developer, source)</li> <li>Dependency information</li> <li>Troubleshooting guide</li> </ul>"},{"location":"DOCUMENTATION_DEVELOPMENT_SUMMARY/#quickstartmd","title":"quickstart.md","text":"<ul> <li>Command-line usage examples</li> <li>Python library usage examples</li> <li>Text file format specification</li> <li>Example output</li> </ul>"},{"location":"DOCUMENTATION_DEVELOPMENT_SUMMARY/#usagemd","title":"usage.md","text":"<ul> <li>Detailed command-line examples</li> <li>Python library examples</li> <li>Advanced usage patterns</li> <li>Error handling</li> </ul>"},{"location":"DOCUMENTATION_DEVELOPMENT_SUMMARY/#apimd","title":"api.md","text":"<ul> <li>Function documentation with parameters and examples</li> <li>Module-level documentation</li> <li>Exception handling information</li> </ul>"},{"location":"DOCUMENTATION_DEVELOPMENT_SUMMARY/#contributingmd","title":"contributing.md","text":"<ul> <li>Getting started guide</li> <li>Development setup instructions</li> <li>Code standards</li> <li>Testing guidelines</li> <li>Pull request process</li> </ul>"},{"location":"DOCUMENTATION_DEVELOPMENT_SUMMARY/#licensemd","title":"license.md","text":"<ul> <li>Full MIT license text</li> </ul>"},{"location":"DOCUMENTATION_DEVELOPMENT_SUMMARY/#readmemd-enhancements","title":"README.md Enhancements","text":"<p>The README has been updated with: - Better badges - More comprehensive quickstart examples - Text file format specification - Link to full documentation - Contributing section</p>"},{"location":"DOCUMENTATION_DEVELOPMENT_SUMMARY/#next-steps","title":"Next Steps","text":"<ol> <li>Review the documentation content for technical accuracy</li> <li>Add any missing details based on the actual implementation</li> <li>Build and deploy the documentation site using MkDocs</li> <li>Update the GitHub repository with the new documentation</li> </ol>"},{"location":"PACKAGE_DISTRIBUTION/","title":"SEL_Rdb Package - Distribution Summary","text":""},{"location":"PACKAGE_DISTRIBUTION/#package-information","title":"Package Information","text":"<ul> <li>Name: SEL_Rdb</li> <li>Version: 1.0.0</li> <li>Author: AOUF Nihed</li> <li>Affiliation: ESGEE (\u00c9cole Sup\u00e9rieure de G\u00e9nie \u00c9lectrique)</li> <li>Partnership: Ateam Pro-tech (Official SEL Partner)</li> <li>License: MIT</li> </ul>"},{"location":"PACKAGE_DISTRIBUTION/#package-contents","title":"Package Contents","text":"<p>The SEL_Rdb package includes the following modules:</p> <ol> <li>rdb_analyzer - Comprehensive RDB file analysis</li> <li>list_rdb_streams - List streams in RDB files</li> <li>extract_logic_section - Extract logic sections from RDB files</li> <li>create_rdb_template - Template-based RDB creation</li> <li>logic_analyzer - Analyze logic equations</li> <li>sel_logic_count - Count logic elements</li> <li>extract_settings - Extract settings from RDB files</li> <li>utils - General utility functions</li> </ol>"},{"location":"PACKAGE_DISTRIBUTION/#installation","title":"Installation","text":""},{"location":"PACKAGE_DISTRIBUTION/#from-pypi-when-published","title":"From PyPI (when published):","text":"<pre><code>pip install SEL_Rdb\n</code></pre>"},{"location":"PACKAGE_DISTRIBUTION/#from-local-distribution-files","title":"From local distribution files:","text":"<pre><code># Install from wheel file\npip install dist/SEL_Rdb-1.0.0-py3-none-any.whl\n\n# Or install from source distribution\npip install dist/sel_rdb-1.0.0.tar.gz\n</code></pre>"},{"location":"PACKAGE_DISTRIBUTION/#usage","title":"Usage","text":""},{"location":"PACKAGE_DISTRIBUTION/#as-a-command-line-tool","title":"As a Command-Line Tool:","text":"<pre><code># List streams in an RDB file\nsel-rdb-list path/to/file.rdb\n\n# Analyze an RDB file\nsel-rdb-analyze path/to/file.rdb\n\n# Extract logic sections from an RDB file\nsel-rdb-extract-logic path/to/file.rdb\n\n# Create an RDB file from a text file\nsel-rdb-create path/to/settings.txt path/to/output.rdb\n</code></pre>"},{"location":"PACKAGE_DISTRIBUTION/#as-a-python-library","title":"As a Python Library:","text":"<pre><code>import sel_rdb\n\n# List streams in an RDB file\nstreams = sel_rdb.list_streams(\"path/to/file.rdb\")\n\n# Analyze an RDB file\nsel_rdb.analyze_rdb_file(\"path/to/file.rdb\")\n\n# Extract logic from an RDB file\nlogic = sel_rdb.extract_logic_from_file(\"path/to/file.rdb\")\n\n# Create an RDB file from a text file\nsel_rdb.create_rdb_file(\"path/to/settings.txt\", \"path/to/output.rdb\")\n</code></pre>"},{"location":"PACKAGE_DISTRIBUTION/#requirements","title":"Requirements","text":"<ul> <li>Python 3.6+</li> <li>olefile</li> <li>openpyxl</li> </ul>"},{"location":"PACKAGE_DISTRIBUTION/#distribution-files","title":"Distribution Files","text":"<p>The following distribution files have been created:</p> <ol> <li>Wheel File: <code>dist/SEL_Rdb-1.0.0-py3-none-any.whl</code></li> <li>Platform-independent binary distribution</li> <li> <p>Ready for installation with pip</p> </li> <li> <p>Source Distribution: <code>dist/sel_rdb-1.0.0.tar.gz</code></p> </li> <li>Source code distribution</li> <li>Can be installed on any platform with compatible Python version</li> </ol>"},{"location":"PACKAGE_DISTRIBUTION/#package-structure","title":"Package Structure","text":"<pre><code>sel_rdb/\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 rdb_analyzer.py\n\u251c\u2500\u2500 list_rdb_streams.py\n\u251c\u2500\u2500 extract_logic_section.py\n\u251c\u2500\u2500 create_rdb_template.py\n\u251c\u2500\u2500 logic_analyzer.py\n\u251c\u2500\u2500 sel_logic_count.py\n\u251c\u2500\u2500 extract_settings.py\n\u251c\u2500\u2500 utils.py\n\u251c\u2500\u2500 Relay710.rdb          # Template file for RDB creation\n\u2514\u2500\u2500 ...\n</code></pre>"},{"location":"PACKAGE_DISTRIBUTION/#entry-points","title":"Entry Points","text":"<p>The package provides the following command-line entry points:</p> <ul> <li><code>sel-rdb-list</code> - List streams in RDB files</li> <li><code>sel-rdb-analyze</code> - Analyze RDB files</li> <li><code>sel-rdb-extract-logic</code> - Extract logic sections</li> <li><code>sel-rdb-create</code> - Create RDB files from text settings</li> </ul>"},{"location":"PACKAGE_DISTRIBUTION/#development-information","title":"Development Information","text":"<p>This package was developed as part of a final year project by AOUF Nihed, an Electrical Engineering student at ESGEE (\u00c9cole Sup\u00e9rieure de G\u00e9nie \u00c9lectrique), in collaboration with Ateam Pro-tech, an official partner of SEL Schweitzer Engineering Laboratories.</p>"},{"location":"PACKAGE_DISTRIBUTION/#future-enhancements","title":"Future Enhancements","text":"<p>Potential future enhancements for the package:</p> <ol> <li>Improved Documentation: More comprehensive API documentation</li> <li>Extended Functionality: Additional tools for RDB file manipulation</li> <li>Better Error Handling: More robust error handling and reporting</li> <li>Enhanced Testing: More comprehensive test suite</li> <li>Python 3.11+ Support: Optimization for newer Python versions</li> </ol>"},{"location":"PACKAGE_DISTRIBUTION/#license","title":"License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details.</p>"},{"location":"PROJECT_STRUCTURE/","title":"SEL RDB Tools - Project Structure","text":""},{"location":"PROJECT_STRUCTURE/#directory-structure","title":"Directory Structure","text":"<pre><code>rdb-tool/\n\u251c\u2500\u2500 docs/\n\u2502   \u251c\u2500\u2500 images/\n\u2502   \u2502   \u2514\u2500\u2500 README.md (logo placeholder)\n\u2502   \u251c\u2500\u2500 PROJECT_SUMMARY.md\n\u2502   \u251c\u2500\u2500 RDB_Creation_Summary.md\n\u2502   \u251c\u2500\u2500 README.md\n\u2502   \u2514\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 examples/\n\u2502   \u251c\u2500\u2500 output.txt\n\u2502   \u251c\u2500\u2500 relay710_template.rdb\n\u2502   \u251c\u2500\u2500 Relay710.rdb\n\u2502   \u251c\u2500\u2500 relay710.txt\n\u2502   \u2514\u2500\u2500 test_template.rdb\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 convert_txt_to_rdb.py\n\u2502   \u251c\u2500\u2500 create_minimal_rdb_openpyxl.py\n\u2502   \u251c\u2500\u2500 create_minimal_rdb.py\n\u2502   \u251c\u2500\u2500 create_placeholder_rdb.py\n\u2502   \u251c\u2500\u2500 create_rdb_com.py\n\u2502   \u251c\u2500\u2500 create_rdb_template.py\n\u2502   \u251c\u2500\u2500 extract_logic_section.py\n\u2502   \u251c\u2500\u2500 extract_settings.py\n\u2502   \u251c\u2500\u2500 interval_utils.py\n\u2502   \u251c\u2500\u2500 list_rdb_streams.py\n\u2502   \u251c\u2500\u2500 logic_analyzer.py\n\u2502   \u251c\u2500\u2500 logic_changer.py\n\u2502   \u251c\u2500\u2500 logic_manipulator_functions.py\n\u2502   \u251c\u2500\u2500 rdb_analyzer.py\n\u2502   \u251c\u2500\u2500 sel_logic_count.py\n\u2502   \u251c\u2500\u2500 utils.py\n\u2502   \u2514\u2500\u2500 Relay710.rdb\n\u251c\u2500\u2500 tests/\n\u2502   \u2514\u2500\u2500 test_suite.py\n\u251c\u2500\u2500 rdb_tool.py\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"PROJECT_STRUCTURE/#file-descriptions","title":"File Descriptions","text":""},{"location":"PROJECT_STRUCTURE/#root-directory","title":"Root Directory","text":"<ul> <li><code>rdb_tool.py</code> - Main entry point for all tools</li> <li><code>README.md</code> - Project overview and usage instructions</li> </ul>"},{"location":"PROJECT_STRUCTURE/#docs","title":"docs/","text":"<ul> <li><code>images/</code> - Directory for logo and other images</li> <li><code>PROJECT_SUMMARY.md</code> - Comprehensive project summary</li> <li><code>RDB_Creation_Summary.md</code> - Detailed analysis of RDB creation approaches</li> <li><code>README.md</code> - Documentation overview</li> <li><code>requirements.txt</code> - Python dependencies</li> </ul>"},{"location":"PROJECT_STRUCTURE/#examples","title":"examples/","text":"<ul> <li><code>output.txt</code> - Sample output from logic extraction</li> <li><code>relay710_template.rdb</code> - Template-based RDB file</li> <li><code>Relay710.rdb</code> - Original sample RDB file</li> <li><code>relay710.txt</code> - Sample relay settings in text format</li> <li><code>test_template.rdb</code> - Test RDB file created by template approach</li> </ul>"},{"location":"PROJECT_STRUCTURE/#src","title":"src/","text":"<ul> <li><code>convert_txt_to_rdb.py</code> - Experimental text to RDB conversion</li> <li><code>create_minimal_rdb_openpyxl.py</code> - Create minimal RDB using openpyxl</li> <li><code>create_minimal_rdb.py</code> - Create minimal RDB using xlwt</li> <li><code>create_placeholder_rdb.py</code> - Create placeholder RDB file</li> <li><code>create_rdb_com.py</code> - COM-based RDB creation (experimental)</li> <li><code>create_rdb_template.py</code> - Template-based RDB creation</li> <li><code>extract_logic_section.py</code> - Extract logic sections from RDB files</li> <li><code>extract_settings.py</code> - Extract settings from RDB files</li> <li><code>interval_utils.py</code> - Time interval utilities</li> <li><code>list_rdb_streams.py</code> - List streams in RDB files</li> <li><code>logic_analyzer.py</code> - Analyze logic equations</li> <li><code>logic_changer.py</code> - Modify logic in RDB files</li> <li><code>logic_manipulator_functions.py</code> - Logic manipulation functions</li> <li><code>rdb_analyzer.py</code> - Comprehensive RDB file analysis</li> <li><code>sel_logic_count.py</code> - Count logic elements</li> <li><code>utils.py</code> - General utility functions</li> <li><code>Relay710.rdb</code> - Template RDB file for conversion tools</li> </ul>"},{"location":"PROJECT_STRUCTURE/#tests","title":"tests/","text":"<ul> <li><code>test_suite.py</code> - Automated test suite for all tools</li> </ul>"},{"location":"PROJECT_STRUCTURE/#usage","title":"Usage","text":""},{"location":"PROJECT_STRUCTURE/#main-interface","title":"Main Interface","text":"<pre><code>python rdb_tool.py analyze &lt;rdb_file&gt;\npython rdb_tool.py extract-logic &lt;rdb_file&gt;\npython rdb_tool.py convert &lt;txt_file&gt; &lt;rdb_file&gt;\n</code></pre>"},{"location":"PROJECT_STRUCTURE/#individual-tools","title":"Individual Tools","text":"<p>All tools in the <code>src/</code> directory can be run directly: <pre><code>python src/list_rdb_streams.py &lt;rdb_file&gt;\npython src/rdb_analyzer.py &lt;rdb_file&gt;\npython src/extract_logic_section.py &lt;rdb_file&gt;\npython src/create_rdb_template.py &lt;txt_file&gt; &lt;rdb_file&gt;\n</code></pre></p>"},{"location":"PROJECT_STRUCTURE/#test-suite","title":"Test Suite","text":"<p>Run all tests to verify functionality: <pre><code>python tests/test_suite.py\n</code></pre></p>"},{"location":"PROJECT_SUMMARY/","title":"SEL RDB Tools - Project Summary","text":""},{"location":"PROJECT_SUMMARY/#project-overview","title":"Project Overview","text":"<p>This project provides a comprehensive toolkit for working with SEL (Schweitzer Engineering Laboratories) .rdb relay database files. The tools enable users to analyze, extract, and manipulate relay configuration data stored in the proprietary OLE2 structured storage format used by SEL QuickSet software.</p>"},{"location":"PROJECT_SUMMARY/#key-achievements","title":"Key Achievements","text":""},{"location":"PROJECT_SUMMARY/#1-rdb-file-analysis","title":"1. RDB File Analysis","text":"<ul> <li>Successfully analyzed the structure of SEL .rdb files</li> <li>Identified all streams and their content within RDB files</li> <li>Created tools to list and examine RDB file contents</li> </ul>"},{"location":"PROJECT_SUMMARY/#2-logic-extraction","title":"2. Logic Extraction","text":"<ul> <li>Developed functionality to extract logic sections from RDB files</li> <li>Created tools to analyze SELogic equations and other logic elements</li> <li>Implemented extraction of protection and automation logic</li> </ul>"},{"location":"PROJECT_SUMMARY/#3-file-conversion","title":"3. File Conversion","text":"<ul> <li>Explored multiple approaches to convert text-based relay settings to .rdb format</li> <li>Implemented template-based approach for creating RDB files</li> <li>Documented limitations and challenges in RDB file creation</li> </ul>"},{"location":"PROJECT_SUMMARY/#4-project-organization","title":"4. Project Organization","text":"<ul> <li>Created a well-structured project with clear directories:</li> <li><code>src/</code> - Source code for all tools</li> <li><code>docs/</code> - Documentation and requirements</li> <li><code>examples/</code> - Sample files and test data</li> <li><code>tests/</code> - Test files (prepared for future use)</li> <li>Developed a unified command-line interface</li> </ul>"},{"location":"PROJECT_SUMMARY/#tools-included","title":"Tools Included","text":""},{"location":"PROJECT_SUMMARY/#analysis-tools","title":"Analysis Tools","text":"<ul> <li><code>rdb_analyzer.py</code> - Comprehensive RDB file analysis</li> <li><code>list_rdb_streams.py</code> - Stream listing utility</li> <li><code>extract_settings.py</code> - Settings extraction tool</li> </ul>"},{"location":"PROJECT_SUMMARY/#logic-tools","title":"Logic Tools","text":"<ul> <li><code>extract_logic_section.py</code> - Logic section extraction</li> <li><code>logic_analyzer.py</code> - Logic equation analysis</li> <li><code>sel_logic_count.py</code> - Logic element counting</li> <li><code>logic_changer.py</code> - Logic modification utilities</li> </ul>"},{"location":"PROJECT_SUMMARY/#conversion-tools","title":"Conversion Tools","text":"<ul> <li><code>create_rdb_template.py</code> - Template-based RDB creation</li> <li><code>convert_txt_to_rdb.py</code> - Text to RDB conversion (experimental)</li> <li><code>create_rdb_com.py</code> - COM-based RDB creation (experimental)</li> </ul>"},{"location":"PROJECT_SUMMARY/#technical-approach","title":"Technical Approach","text":""},{"location":"PROJECT_SUMMARY/#file-format-understanding","title":"File Format Understanding","text":"<p>The project successfully reverse-engineered key aspects of the SEL RDB format: - OLE2 structured storage container format - Stream organization with \"Relays/New Settings 2/\" hierarchy - Content format with sections identified by [INFO] and group identifiers - Logic equations stored in SVxx fields with specific syntax</p>"},{"location":"PROJECT_SUMMARY/#implementation-strategies","title":"Implementation Strategies","text":"<ol> <li>Template-based approach - Most successful for creating RDB files</li> <li>COM objects - Attempted but faced technical challenges</li> <li>Direct file manipulation - Used olefile library with limitations</li> </ol>"},{"location":"PROJECT_SUMMARY/#challenges-and-limitations","title":"Challenges and Limitations","text":""},{"location":"PROJECT_SUMMARY/#technical-challenges","title":"Technical Challenges","text":"<ol> <li>OLE2 Complexity - Creating valid structured storage files from scratch is complex</li> <li>Stream Size Constraints - The olefile library cannot modify stream sizes easily</li> <li>Format Specificity - SEL RDB format has specific requirements not fully documented</li> </ol>"},{"location":"PROJECT_SUMMARY/#current-limitations","title":"Current Limitations","text":"<ol> <li>Full Conversion Not Complete - Text to RDB conversion is not fully implemented</li> <li>Platform Dependencies - Some approaches require Windows-specific libraries</li> <li>Size Constraints - Template-based approach requires careful stream size management</li> </ol>"},{"location":"PROJECT_SUMMARY/#usage-examples","title":"Usage Examples","text":""},{"location":"PROJECT_SUMMARY/#analyze-an-rdb-file","title":"Analyze an RDB file","text":"<pre><code>python rdb_tool.py analyze examples/Relay710.rdb\n</code></pre>"},{"location":"PROJECT_SUMMARY/#extract-logic-sections","title":"Extract logic sections","text":"<pre><code>python rdb_tool.py extract-logic examples/Relay710.rdb\n</code></pre>"},{"location":"PROJECT_SUMMARY/#create-rdb-from-template","title":"Create RDB from template","text":"<pre><code>python src/create_rdb_template.py examples/relay710.txt output.rdb\n</code></pre>"},{"location":"PROJECT_SUMMARY/#future-enhancements","title":"Future Enhancements","text":""},{"location":"PROJECT_SUMMARY/#technical-improvements","title":"Technical Improvements","text":"<ol> <li>Complete Conversion Tool - Fully implement text to RDB conversion</li> <li>Cross-platform Support - Reduce Windows-specific dependencies</li> <li>Enhanced Error Handling - Improve robustness and error reporting</li> </ol>"},{"location":"PROJECT_SUMMARY/#feature-additions","title":"Feature Additions","text":"<ol> <li>Logic Modification - Tools to modify existing logic equations</li> <li>Validation Tools - Verify RDB file integrity and correctness</li> <li>Batch Processing - Process multiple files at once</li> </ol>"},{"location":"PROJECT_SUMMARY/#conclusion","title":"Conclusion","text":"<p>This project successfully created a comprehensive toolkit for working with SEL RDB files, providing valuable functionality for analyzing and extracting relay configuration data. While full conversion from text settings to RDB format remains challenging due to the complexity of the OLE2 structured storage format, the template-based approach provides a viable solution for many use cases.</p> <p>The organized project structure and well-documented code provide a solid foundation for future enhancements and maintenance. The tools have been tested with real SEL RDB files and proven to work correctly for their intended purposes.</p>"},{"location":"RDB_Creation_Summary/","title":"SEL RDB File Creation - Summary and Recommendations","text":""},{"location":"RDB_Creation_Summary/#overview","title":"Overview","text":"<p>This document summarizes our attempts to create a valid SEL .rdb file that can be imported and used in SEL QuickSet software. An SEL RDB file is a structured storage file with a specific OLE2 format containing relay settings, logic, and configuration data.</p>"},{"location":"RDB_Creation_Summary/#analysis-of-existing-rdb-file","title":"Analysis of Existing RDB File","text":"<p>We analyzed the existing <code>Relay710.rdb</code> file and found it contains the following streams: - Relays/New Settings 2/Misc/Cfg.txt - Relays/New Settings 2/Misc/DatabaseVersion.txt - Relays/New Settings 2/Misc/Device.txt - Relays/New Settings 2/Misc/DmyCmts5010 - Relays/New Settings 2/Misc/Version - Relays/New Settings 2/set_1.txt - Relays/New Settings 2/set_2.txt - Relays/New Settings 2/set_3.txt - Relays/New Settings 2/set_F.txt - Relays/New Settings 2/set_G.txt - Relays/New Settings 2/set_L1.txt - Relays/New Settings 2/set_L2.txt - Relays/New Settings 2/set_L3.txt - Relays/New Settings 2/set_M.txt - Relays/New Settings 2/set_P1.txt - Relays/New Settings 2/set_P2.txt - Relays/New Settings 2/set_P3.txt - Relays/New Settings 2/set_P4.txt - Relays/New Settings 2/set_PF.txt - Relays/New Settings 2/set_R.txt</p>"},{"location":"RDB_Creation_Summary/#approaches-attempted","title":"Approaches Attempted","text":""},{"location":"RDB_Creation_Summary/#1-template-based-approach","title":"1. Template-based Approach","text":"<p>We tried copying an existing RDB file and modifying its streams: - Pros: Maintains the correct file structure - Cons: The <code>olefile</code> library cannot modify stream sizes, so we couldn't update the content</p>"},{"location":"RDB_Creation_Summary/#2-com-object-approach","title":"2. COM Object Approach","text":"<p>We tried using Windows COM objects to create a structured storage file: - Pros: Would create a proper OLE2 file - Cons: Encountered issues with COM object usage in Python</p>"},{"location":"RDB_Creation_Summary/#3-excel-based-approach","title":"3. Excel-based Approach","text":"<p>We tried creating an Excel file and renaming it to .rdb: - Pros: Simple to implement - Cons: Not a valid RDB file format, won't work with SEL QuickSet</p>"},{"location":"RDB_Creation_Summary/#recommendations","title":"Recommendations","text":""},{"location":"RDB_Creation_Summary/#for-a-production-solution","title":"For a Production Solution","text":"<ol> <li>Use a proper OLE2 library: Look for a library that can create and modify OLE2 structured storage files with the correct format.</li> <li>Windows COM objects: Properly implement the COM object approach with error handling for object lifecycle management.</li> <li>Reverse engineer the format: Analyze the exact format of the streams in a valid RDB file to ensure compatibility.</li> </ol>"},{"location":"RDB_Creation_Summary/#for-a-prototype-solution","title":"For a Prototype Solution","text":"<ol> <li>Template-based with stream resizing: Modify the template approach to handle stream size differences.</li> <li>Manual creation: Create a valid RDB file manually using SEL QuickSet and then use it as a template.</li> </ol>"},{"location":"RDB_Creation_Summary/#conclusion","title":"Conclusion","text":"<p>Creating a valid SEL RDB file requires detailed knowledge of the OLE2 structured storage format and the specific structure of SEL RDB files. While we made progress in understanding the file structure, creating a fully functional RDB file from scratch is complex and requires specialized tools or libraries.</p> <p>For immediate use, the template-based approach with an existing valid RDB file as a base is the most viable option, but it needs to be enhanced to handle stream size differences.</p>"},{"location":"api/","title":"API Reference","text":"<p>This document provides detailed information about the SEL_RDB API.</p>"},{"location":"api/#main-package-functions","title":"Main Package Functions","text":""},{"location":"api/#analyze_rdb_filerdb_path","title":"<code>analyze_rdb_file(rdb_path)</code>","text":"<p>Analyze an RDB file and list its streams with content previews.</p> <p>Parameters: - <code>rdb_path</code> (str): Path to the RDB file to analyze</p> <p>Returns: - <code>bool</code>: True if successful, False otherwise</p> <p>Example: <pre><code>import sel_rdb\nsel_rdb.analyze_rdb_file(\"examples/Relay710.rdb\")\n</code></pre></p>"},{"location":"api/#list_streamsrdb_path","title":"<code>list_streams(rdb_path)</code>","text":"<p>List all streams in an RDB file.</p> <p>Parameters: - <code>rdb_path</code> (str): Path to the RDB file</p> <p>Returns: - <code>list</code>: List of stream paths</p> <p>Example: <pre><code>import sel_rdb\nstreams = sel_rdb.list_streams(\"examples/Relay710.rdb\")\n</code></pre></p>"},{"location":"api/#extract_logic_from_filerdb_path","title":"<code>extract_logic_from_file(rdb_path)</code>","text":"<p>Extract logic sections from an RDB file.</p> <p>Parameters: - <code>rdb_path</code> (str): Path to the RDB file</p> <p>Returns: - <code>dict</code>: Dictionary with group names as keys and logic lists as values</p> <p>Example: <pre><code>import sel_rdb\nlogic = sel_rdb.extract_logic_from_file(\"examples/Relay710.rdb\")\n</code></pre></p>"},{"location":"api/#create_rdb_fileinput_txt_path-output_rdb_path-template_rdb_pathnone","title":"<code>create_rdb_file(input_txt_path, output_rdb_path, template_rdb_path=None)</code>","text":"<p>Convert a relay settings text file to a valid SEL .rdb file by copying a template and modifying its contents.</p> <p>Parameters: - <code>input_txt_path</code> (str): Path to the input text file with relay settings - <code>output_rdb_path</code> (str): Path where the output RDB file will be created - <code>template_rdb_path</code> (str, optional): Path to the template RDB file. If not provided, will look for Relay710.rdb in the package directory.</p> <p>Example: <pre><code>import sel_rdb\nsel_rdb.create_rdb_file(\"examples/relay710.txt\", \"output.rdb\")\n</code></pre></p>"},{"location":"api/#module-level-documentation","title":"Module-level Documentation","text":""},{"location":"api/#rdb_analyzer-module","title":"<code>rdb_analyzer</code> Module","text":"<p>Contains functions for comprehensive RDB file analysis.</p> <p>Functions: - <code>analyze_rdb_file(rdb_path)</code>: Main function for analyzing RDB files - <code>main()</code>: Command-line interface function</p>"},{"location":"api/#list_rdb_streams-module","title":"<code>list_rdb_streams</code> Module","text":"<p>Contains functions for listing streams in RDB files.</p> <p>Functions: - <code>list_streams(rdb_path)</code>: Main function for listing streams - <code>main()</code>: Command-line interface function</p>"},{"location":"api/#extract_logic_section-module","title":"<code>extract_logic_section</code> Module","text":"<p>Contains functions for extracting logic sections from RDB files.</p> <p>Functions: - <code>process_file(path, group)</code>: Process a specific file and group - <code>extract_logic_from_file(path)</code>: Extract logic from all streams in an RDB file - <code>main()</code>: Command-line interface function</p>"},{"location":"api/#create_rdb_template-module","title":"<code>create_rdb_template</code> Module","text":"<p>Contains functions for template-based RDB creation.</p> <p>Functions: - <code>create_rdb_file(input_txt_path, output_rdb_path, template_rdb_path=None)</code>: Main function for creating RDB files - <code>parse_txt_content(content)</code>: Parse text content into sections - <code>write_required_streams(ole, sections)</code>: Write required streams to the OLE file - <code>create_cfg_content(sections)</code>: Create Cfg.txt content - <code>write_setting_files(ole, sections, base_path)</code>: Write setting files - <code>create_*_content(sections)</code>: Functions for creating content for different setting files - <code>main()</code>: Command-line interface function</p>"},{"location":"api/#logic_analyzer-module","title":"<code>logic_analyzer</code> Module","text":"<p>Contains functions for analyzing logic equations.</p>"},{"location":"api/#sel_logic_count-module","title":"<code>sel_logic_count</code> Module","text":"<p>Contains functions for counting logic elements.</p>"},{"location":"api/#extract_settings-module","title":"<code>extract_settings</code> Module","text":"<p>Contains functions for extracting settings from RDB files.</p>"},{"location":"api/#utils-module","title":"<code>utils</code> Module","text":"<p>Contains general utility functions.</p> <p>Functions: - <code>flatten(l)</code>: Flatten list of lists by 1 - <code>unique(l)</code>: Get unique items in a list - <code>remove_empty(mylist)</code>: Remove empty items from a list - <code>hasNumbers(inputString)</code>: Check if string contains numbers - <code>multiple_replace(text, repldict)</code>: Replace multiple strings while supporting backreferences - <code>build_replacer(cases)</code>: Build a replacer function - <code>absolute_backreference(text, n)</code>: Handle absolute backreferences - <code>multireplace(text, repldict, prefix='', suffix='')</code>: Perform multiple replacements</p>"},{"location":"api/#exception-handling","title":"Exception Handling","text":"<p>The SEL_RDB package may raise the following exceptions:</p> <ul> <li><code>FileNotFoundError</code>: When a specified file does not exist</li> <li><code>olefile.OleError</code>: When there are issues with OLE file processing</li> <li><code>UnicodeError</code>: When there are encoding issues with file content</li> <li><code>ValueError</code>: When there are issues with stream operations</li> <li><code>Exception</code>: General exceptions for other error conditions</li> </ul> <p>Always wrap calls to SEL_RDB functions in try-except blocks for production code.</p>"},{"location":"contributing/","title":"Contributing to SEL_RDB","text":"<p>We welcome contributions to SEL_RDB! This document provides guidelines for contributing to the project.</p>"},{"location":"contributing/#getting-started","title":"Getting Started","text":"<ol> <li>Fork the repository on GitHub</li> <li>Clone your fork locally</li> <li>Create a new branch for your feature or bug fix</li> <li>Make your changes</li> <li>Test your changes</li> <li>Submit a pull request</li> </ol>"},{"location":"contributing/#development-setup","title":"Development Setup","text":"<ol> <li> <p>Clone the repository:    <pre><code>git clone https://github.com/your-username/SEL_Rdb.git\ncd SEL_Rdb\n</code></pre></p> </li> <li> <p>Create a virtual environment:    <pre><code>python -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n</code></pre></p> </li> <li> <p>Install the package in development mode:    <pre><code>pip install -e \".[dev]\"\n</code></pre></p> </li> </ol>"},{"location":"contributing/#code-standards","title":"Code Standards","text":""},{"location":"contributing/#python-style","title":"Python Style","text":"<p>We follow PEP 8 style guidelines. Key points: - Use 4 spaces for indentation - Limit lines to 79 characters - Use descriptive variable and function names - Write docstrings for all public functions and classes</p>"},{"location":"contributing/#documentation","title":"Documentation","text":"<ul> <li>Update documentation when adding new features</li> <li>Write clear, concise docstrings</li> <li>Provide usage examples for new functionality</li> <li>Keep README.md and docs/ up to date</li> </ul>"},{"location":"contributing/#testing","title":"Testing","text":""},{"location":"contributing/#running-tests","title":"Running Tests","text":"<p>To run the existing test suite:</p> <pre><code>python test_package.py\n</code></pre>"},{"location":"contributing/#adding-tests","title":"Adding Tests","text":"<p>When adding new features: 1. Write tests for your new functionality 2. Ensure all existing tests still pass 3. Add test cases to <code>test_package.py</code> or create new test files as appropriate</p>"},{"location":"contributing/#submitting-changes","title":"Submitting Changes","text":""},{"location":"contributing/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Ensure your code follows the style guidelines</li> <li>Update documentation as needed</li> <li>Add tests for new functionality</li> <li>Verify all tests pass</li> <li>Create a pull request with a clear description of changes</li> </ol>"},{"location":"contributing/#commit-messages","title":"Commit Messages","text":"<ul> <li>Use clear, descriptive commit messages</li> <li>Follow the format: \"Brief summary (fixes #123)\"</li> <li>Reference issue numbers when applicable</li> </ul>"},{"location":"contributing/#reporting-issues","title":"Reporting Issues","text":""},{"location":"contributing/#bug-reports","title":"Bug Reports","text":"<p>When reporting bugs, please include: - Version of SEL_RDB you're using - Python version - Operating system - Steps to reproduce the issue - Expected behavior - Actual behavior - Any error messages</p>"},{"location":"contributing/#feature-requests","title":"Feature Requests","text":"<p>For feature requests, please describe: - The problem you're trying to solve - How the feature would work - Examples of usage - Any alternative solutions you've considered</p>"},{"location":"contributing/#areas-for-contribution","title":"Areas for Contribution","text":""},{"location":"contributing/#code-improvements","title":"Code Improvements","text":"<ul> <li>Enhance error handling and reporting</li> <li>Improve performance of file processing</li> <li>Add support for additional RDB file formats</li> <li>Expand logic extraction capabilities</li> </ul>"},{"location":"contributing/#documentation_1","title":"Documentation","text":"<ul> <li>Improve existing documentation</li> <li>Add more usage examples</li> <li>Create tutorials</li> <li>Translate documentation</li> </ul>"},{"location":"contributing/#testing_1","title":"Testing","text":"<ul> <li>Expand test coverage</li> <li>Add integration tests</li> <li>Create test fixtures for different RDB file types</li> </ul>"},{"location":"contributing/#community","title":"Community","text":""},{"location":"contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>Please be respectful and professional in all interactions. We are committed to providing a welcoming environment for all contributors.</p>"},{"location":"contributing/#getting-help","title":"Getting Help","text":"<p>If you need help with contributing: 1. Check the documentation 2. Search existing issues 3. Open a new issue with your question</p> <p>Thank you for contributing to SEL_RDB!</p>"},{"location":"installation/","title":"Installation Guide","text":""},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8 or higher</li> <li>pip (Python package installer)</li> </ul>"},{"location":"installation/#installation-methods","title":"Installation Methods","text":""},{"location":"installation/#from-pypi-recommended","title":"From PyPI (Recommended)","text":"<p>To install SEL_RDB from PyPI, simply run:</p> <pre><code>pip install SEL_Rdb\n</code></pre>"},{"location":"installation/#developer-installation-editable-mode","title":"Developer Installation (Editable Mode)","text":"<p>For development purposes, you can install the package in editable mode:</p> <pre><code>pip install -e \".[dev]\"\n</code></pre>"},{"location":"installation/#from-source","title":"From Source","text":"<p>To install directly from the source code:</p> <pre><code>git clone https://github.com/AoufNihed/SEL_Rdb.git\ncd SEL_Rdb\npip install .\n</code></pre>"},{"location":"installation/#dependencies","title":"Dependencies","text":"<p>SEL_RDB requires the following Python packages: - <code>olefile</code>: For reading and manipulating OLE2 structured storage files - <code>openpyxl</code>: For Excel file handling (used in some conversion approaches)</p> <p>These dependencies will be automatically installed when you install SEL_RDB using pip.</p>"},{"location":"installation/#verification","title":"Verification","text":"<p>To verify that the installation was successful, you can test the import:</p> <pre><code>import sel_rdb\nprint(sel_rdb.__version__)\n</code></pre> <p>You should see the version number of the installed package.</p>"},{"location":"installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"installation/#common-issues","title":"Common Issues","text":"<ol> <li> <p>Permission errors: If you encounter permission errors during installation, try using the <code>--user</code> flag:    <pre><code>pip install --user SEL_Rdb\n</code></pre></p> </li> <li> <p>Python version compatibility: Ensure you're using Python 3.8 or higher:    <pre><code>python --version\n</code></pre></p> </li> <li> <p>Missing dependencies: If you encounter import errors, try reinstalling:    <pre><code>pip install --upgrade --force-reinstall SEL_Rdb\n</code></pre></p> </li> </ol>"},{"location":"installation/#platform-specific-notes","title":"Platform-specific Notes","text":"<ul> <li>Windows: No special considerations</li> <li>macOS: No special considerations</li> <li>Linux: No special considerations</li> </ul> <p>SEL_RDB is designed to be cross-platform compatible.</p>"},{"location":"license/","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2025 AOUF Nihed</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"quickstart/","title":"Quickstart Guide","text":"<p>This guide will help you get started with SEL_RDB quickly.</p>"},{"location":"quickstart/#command-line-usage","title":"Command-line Usage","text":""},{"location":"quickstart/#analyze-an-rdb-file","title":"Analyze an RDB file","text":"<p>To analyze an RDB file and display its internal structure:</p> <pre><code>sel-rdb-analyze path/to/file.rdb\n</code></pre>"},{"location":"quickstart/#list-streams-in-an-rdb-file","title":"List streams in an RDB file","text":"<p>To list all streams within an RDB file:</p> <pre><code>sel-rdb-list path/to/file.rdb\n</code></pre>"},{"location":"quickstart/#extract-logic-sections","title":"Extract logic sections","text":"<p>To extract logic sections from an RDB file:</p> <pre><code>sel-rdb-extract-logic path/to/file.rdb\n</code></pre>"},{"location":"quickstart/#create-an-rdb-file-from-a-text-file","title":"Create an RDB file from a text file","text":"<p>To create an RDB file from a text file:</p> <pre><code>sel-rdb-create path/to/settings.txt path/to/output.rdb\n</code></pre>"},{"location":"quickstart/#python-library-usage","title":"Python Library Usage","text":""},{"location":"quickstart/#basic-import-and-analysis","title":"Basic import and analysis","text":"<pre><code>import sel_rdb\n\n# Analyze an RDB file and display its internal structure\nsel_rdb.analyze_rdb_file(\"path/to/file.rdb\")\n\n# List streams in an RDB file\nstreams = sel_rdb.list_streams(\"path/to/file.rdb\")\nprint(streams)\n\n# Extract logic from an RDB file\nlogic = sel_rdb.extract_logic_from_file(\"path/to/file.rdb\")\nprint(logic)\n\n# Create an RDB file from a text file\nsel_rdb.create_rdb_file(\"path/to/settings.txt\", \"path/to/output.rdb\")\n</code></pre>"},{"location":"quickstart/#text-file-format-for-rdb-creation","title":"Text File Format for RDB Creation","text":"<p>To create an RDB file from a text file, you need to format your settings in a specific way:</p> <pre><code>[Device]\nModel=SEL-710\n\n[Protection - Overcurrent]\n50P Pickup=OFF\n51P Pickup=OFF\n\n[Protection - Voltage]\n27P Undervoltage=OFF\n59P Overvoltage=OFF\n\n[Logic Settings]\nSELogic Equation1=INPUT1 \u2192 OUTPUT1\n\n[Communications]\nProtocol=Modbus\nAddress=1\n</code></pre>"},{"location":"quickstart/#example-output","title":"Example Output","text":"<p>When you analyze an RDB file, you'll see output like:</p> <pre><code>Streams/groups in examples/Relay710.rdb:\nRelays/New Settings 2/Misc/Cfg.txt\n  Size: 1024 bytes\n  Content (first 3 lines):\n    [INFO]\n    RELAYTYPE=SEL-710\n    FID=SEL-710-Rxxx-Vx-Z008004-Dxxxxxxxx\n...\n\nRelays/New Settings 2/set_1.txt\n  Size: 2048 bytes\n  Content (first 3 lines):\n    [INFO]\n    RELAYTYPE=SEL-710\n    [1]\n...\n</code></pre> <p>This gives you a comprehensive view of the internal structure of the RDB file.</p>"},{"location":"usage/","title":"Usage Examples","text":"<p>This section provides detailed examples of how to use SEL_RDB in various scenarios.</p>"},{"location":"usage/#command-line-examples","title":"Command-line Examples","text":""},{"location":"usage/#analyzing-rdb-files","title":"Analyzing RDB Files","text":"<p>To analyze an RDB file and see its internal structure:</p> <pre><code>sel-rdb-analyze examples/Relay710.rdb\n</code></pre> <p>This will display all streams in the file along with their content previews.</p>"},{"location":"usage/#listing-streams","title":"Listing Streams","text":"<p>To get just a list of streams without content details:</p> <pre><code>sel-rdb-list examples/Relay710.rdb\n</code></pre>"},{"location":"usage/#extracting-logic-sections","title":"Extracting Logic Sections","text":"<p>To extract all logic equations from an RDB file:</p> <pre><code>sel-rdb-extract-logic examples/Relay710.rdb\n</code></pre> <p>This creates an <code>output.txt</code> file with all extracted logic equations.</p>"},{"location":"usage/#creating-rdb-files","title":"Creating RDB Files","text":"<p>To create an RDB file from a text configuration:</p> <pre><code>sel-rdb-create examples/relay710.txt output.rdb\n</code></pre>"},{"location":"usage/#python-library-examples","title":"Python Library Examples","text":""},{"location":"usage/#basic-analysis","title":"Basic Analysis","text":"<pre><code>import sel_rdb\n\n# Analyze an RDB file\nsel_rdb.analyze_rdb_file(\"examples/Relay710.rdb\")\n\n# List streams only\nstreams = sel_rdb.list_streams(\"examples/Relay710.rdb\")\nfor stream in streams:\n    print(stream)\n</code></pre>"},{"location":"usage/#logic-extraction","title":"Logic Extraction","text":"<pre><code>import sel_rdb\n\n# Extract logic from an RDB file\nlogic_data = sel_rdb.extract_logic_from_file(\"examples/Relay710.rdb\")\n\n# Process the extracted logic\nfor group, equations in logic_data.items():\n    print(f\"Group: {group}\")\n    for equation in equations:\n        print(f\"  {equation}\")\n</code></pre>"},{"location":"usage/#creating-rdb-files_1","title":"Creating RDB Files","text":"<pre><code>import sel_rdb\n\n# Create an RDB file from a text configuration\nsel_rdb.create_rdb_file(\"examples/relay710.txt\", \"output.rdb\")\n\n# Create with a custom template\nsel_rdb.create_rdb_file(\n    \"examples/relay710.txt\", \n    \"output.rdb\", \n    template_rdb_path=\"custom_template.rdb\"\n)\n</code></pre>"},{"location":"usage/#working-with-text-configuration-files","title":"Working with Text Configuration Files","text":"<p>The text configuration file format follows this structure:</p> <pre><code>[Device]\nModel=SEL-710-5\nSerial=7105-654321\n\n[Protection - Overcurrent]\n50P Pickup=120\n50P Delay=0.5\n51P Pickup=100\n51P Time Dial=2.0\n\n[Protection - Voltage]\n27P Undervoltage=0.8\n59P Overvoltage=1.2\n\n[Logic Settings]\nSELogic Equation1=50P AND 51P \u2192 TRIP\nSELogic Equation2=27P OR 59P \u2192 ALARM\n\n[Communications]\nProtocol=Modbus\nAddress=1\nBaud=9600\n</code></pre>"},{"location":"usage/#advanced-usage","title":"Advanced Usage","text":""},{"location":"usage/#custom-stream-processing","title":"Custom Stream Processing","text":"<pre><code>import olefile\nimport sel_rdb\n\n# Open an RDB file directly for custom processing\nole = olefile.OleFileIO(\"examples/Relay710.rdb\")\n\n# List all streams\nstreams = ole.listdir()\nfor stream in streams:\n    print(\"/\".join(stream))\n\n# Read a specific stream\nstream_data = ole.openstream(\"Relays/New Settings 2/set_1.txt\").read()\ntext_content = stream_data.decode('utf-8')\nprint(text_content)\n\n# Close the file\nole.close()\n</code></pre>"},{"location":"usage/#batch-processing","title":"Batch Processing","text":"<pre><code>import os\nimport sel_rdb\n\n# Process all RDB files in a directory\nrdb_files = [f for f in os.listdir(\"rdb_files\") if f.endswith(\".rdb\")]\n\nfor rdb_file in rdb_files:\n    file_path = os.path.join(\"rdb_files\", rdb_file)\n\n    # List streams\n    streams = sel_rdb.list_streams(file_path)\n\n    # Save stream list to a file\n    with open(f\"{rdb_file}_streams.txt\", \"w\") as f:\n        for stream in streams:\n            f.write(f\"{stream}\\n\")\n</code></pre>"},{"location":"usage/#error-handling","title":"Error Handling","text":"<pre><code>import sel_rdb\n\ntry:\n    # Attempt to analyze a file\n    sel_rdb.analyze_rdb_file(\"nonexistent.rdb\")\nexcept FileNotFoundError:\n    print(\"File not found\")\nexcept Exception as e:\n    print(f\"An error occurred: {e}\")\n</code></pre> <p>These examples demonstrate the core functionality of SEL_RDB and show how to integrate it into your workflows for working with SEL relay configuration files.</p>"},{"location":"Case_Study/","title":"SEL_RDB Case Studies","text":"<p>This documentation provides step-by-step instructions on how to use the SEL_RDB package with the provided case studies. The package allows you to convert text-based relay settings (.txt) into SEL .rdb files, analyze them, and run various analytics.</p>"},{"location":"Case_Study/#case-studies-included","title":"Case Studies Included","text":""},{"location":"Case_Study/#1-sel-710-motor-protection-relay","title":"1. SEL-710 Motor Protection Relay","text":"<p>File: <code>SEL-710 Motor.txt</code> A comprehensive motor protection relay configuration with overcurrent, voltage, frequency, and motor-specific protection settings.</p>"},{"location":"Case_Study/#2-sel-710-5-advanced-motor-protection-relay","title":"2. SEL-710-5 Advanced Motor Protection Relay","text":"<p>File: <code>SEL-710-5.txt</code> An advanced motor protection relay with additional features including negative sequence overload protection and enhanced communication settings.</p>"},{"location":"Case_Study/#3-sel-751a-feeder-protection-relay","title":"3. SEL-751A Feeder Protection Relay","text":"<p>File: <code>SEL-751A Relay.txt</code> A feeder protection relay with reclosing, breaker failure, and sectionalizer functions for distribution feeder protection.</p>"},{"location":"Case_Study/#workflow","title":"Workflow","text":"<p>The workflow for using the SEL_RDB package with case studies includes three main steps:</p> <ol> <li>Convert .txt to .rdb - Use the SEL_RDB package to convert text-based relay settings into a valid .rdb file format.</li> <li>Analyze the .rdb File - Run various analytics on the .rdb file to extract streams, logic sections, and other configuration data.</li> <li>Export Reports - Export the analysis results to various formats for documentation and sharing.</li> </ol>"},{"location":"Case_Study/#example-usage-code","title":"Example Usage Code","text":""},{"location":"Case_Study/#converting-a-txt-case-study-to-rdb","title":"Converting a .txt Case Study to .rdb","text":"<p>Command-line approach: <pre><code>sel-rdb-create \"Case_Study/SEL-710 Motor.txt\" \"output/SEL-710_Motor.rdb\"\n</code></pre></p> <p>Python library approach: <pre><code>import sel_rdb\nsel_rdb.create_rdb_file(\"Case_Study/SEL-710 Motor.txt\", \"output/SEL-710_Motor.rdb\")\n</code></pre></p>"},{"location":"Case_Study/#running-analytics-on-rdb-files","title":"Running Analytics on .rdb Files","text":"<p>Command-line approach: <pre><code>sel-rdb-analyze \"output/SEL-710_Motor.rdb\"\nsel-rdb-list \"output/SEL-710_Motor.rdb\"\nsel-rdb-extract-logic \"output/SEL-710_Motor.rdb\"\n</code></pre></p> <p>Python library approach: <pre><code>import sel_rdb\n\n# Analyze the RDB file structure\nsel_rdb.analyze_rdb_file(\"output/SEL-710_Motor.rdb\")\n\n# List all streams in the RDB file\nstreams = sel_rdb.list_streams(\"output/SEL-710_Motor.rdb\")\nprint(\"Streams in RDB file:\", streams)\n\n# Extract logic sections\nlogic = sel_rdb.extract_logic_from_file(\"output/SEL-710_Motor.rdb\")\nprint(\"Logic sections:\", logic)\n</code></pre></p>"},{"location":"Case_Study/#exporting-reports","title":"Exporting Reports","text":"<pre><code># Save analysis results to a text file\nimport sel_rdb\n\nwith open(\"reports/SEL-710_Motor_analysis.txt\", \"w\") as f:\n    # Redirect print output to file\n    import sys\n    original_stdout = sys.stdout\n    sys.stdout = f\n\n    sel_rdb.analyze_rdb_file(\"output/SEL-710_Motor.rdb\")\n\n    # Reset stdout\n    sys.stdout = original_stdout\n\nprint(\"Analysis report saved to reports/SEL-710_Motor_analysis.txt\")\n</code></pre>"},{"location":"Case_Study/#available-case-studies","title":"Available Case Studies","text":"<ul> <li><code>case1_sel710.txt</code> - SEL-710 Motor Protection Relay</li> <li><code>case2_sel710-5.txt</code> - SEL-710-5 Advanced Motor Protection Relay</li> <li><code>case3_sel751a.txt</code> - SEL-751A Feeder Protection Relay</li> </ul>"},{"location":"Case_Study/#next-steps","title":"Next Steps","text":"<p>Try running the workflow on all three case studies to familiarize yourself with the SEL_RDB package capabilities:</p> <ol> <li>Convert each .txt file to .rdb format</li> <li>Analyze the generated .rdb files</li> <li>Extract logic sections from each file</li> <li>Compare the different relay configurations</li> <li>Export reports for documentation</li> </ol> <p>Developed by AOUF Nihed</p> <p>Contact: - Email: aouf_nihed@esgee-oran.dz - LinkedIn: https://www.linkedin.com/in/nihed-aouf/ - GitHub: https://github.com/AoufNihed</p>"},{"location":"images/","title":"SEL Logo Placeholder","text":"<p>This directory should contain the SEL Schweitzer Engineering Laboratories logo file: - sel_logo.png</p> <p>The logo would be displayed at the top of the README.md file.</p> <p>Please obtain the official SEL logo from Schweitzer Engineering Laboratories for proper use.</p>"}]}